Test ``7-base_geometry.py`` module
=========================================

This module defines function for BaseGeometry ``say_my_name(first_name, last_name="")``.

Usage
=====

``area(...)``` notting yet.
``integer_validator(...)``` validates a value as an integer and greater than 0.
 
::

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Checking module is documented:
    >>> m = __import__('7-base_geometry').__doc__
    >>> len(m) > 1
    True

Checking class is documented:
    >>> c = __import__('7-base_geometry').BaseGeometry.__doc__
    >>> len(c) > 1
    True

Checking method is documented:
    >>> mod1 = __import__('7-base_geometry').BaseGeometry.area.__doc__
    >>> len(mod1) > 1
    True
    >>> mod2 = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
    >>> len(mod2) > 1
    True

Checking instantiation:
    >>> bg = BaseGeometry()

Checking case bg = BaseGeometry() print(dir(bg))
    >>> print(dir(bg))
    ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'area', 'integer_validator']

Checking case: bg = BaseGeometry() bg.integervalidator(“myint”, 12)
    >>> bg.integer_validator("myint", 12)


Checking case: bg = BaseGeometry() bg.integer_validator(“width”, 89)
    >>> bg.integer_validator("width", 89)


Checking for area failure:
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Checking for area with arguments:
    >>> bg.area(1)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Checking for integer = 0:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Checking for integer < 0:
    >>> bg.integer_validator("age", -4)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Checking for str:
    >>> bg.integer_validator("age", "4")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for float:
    >>> bg.integer_validator("age", 13.5)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for tuple:
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for array:
    >>> bg.integer_validator("age", [4])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for boolean:
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for non-integer:
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for None:
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

Checking for integer:
    >>> bg.integer_validator("age", 1)


Checking for no argument to integer_validator():
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for one argument to integer_validator():
    >>> bg.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
