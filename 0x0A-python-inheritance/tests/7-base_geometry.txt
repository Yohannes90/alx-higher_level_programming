Test 7-base_geometry.py
=========================================

Importing function form module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>>

=========================================

Checking for class docstring:
    >>> m = __import__('7-base_geometry').__doc__
    >>> len(m) > 1
    True

=========================================

Checking for class docstring:
    >>> mod1 = __import__('7-base_geometry').BaseGeometry.area.__doc__
    >>> len(mod1) > 1
    True
    >>> mod2 = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
    >>> len(mod2) > 1
    True

=========================================

Checking for method docstring:
    >>> c = __import__('7-base_geometry').BaseGeometry.__doc__
    >>> len(c) > 1
    True

=========================================
Checking instantioation:

    >>> base_geometry = BaseGeometry()

=========================================

Checking for area failure:

    >>> base_geometry.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

=========================================

Checking for integer = 0:

    >>> base_geometry.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

=========================================

Checking for integer < 0:

    >>> base_geometry.integer_validator("age", -4)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

==========================================

Checking for str:

    >>> base_geometry.integer_validator("age", "4")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================

Checking for tuple:

    >>> base_geometry.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================

Checking for array:

    >>> base_geometry.integer_validator("age", [4])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================

Checking for boolean:

    >>> base_geometry.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================

Checking for non-integer:

    >>> base_geometry.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================

Checking for None:

    >>> base_geometry.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

===========================================


Checking for integer:
    >>> base_geometry.integer_validator("age", 1)

=========================================

Checking for no argument to integer_validator():

    >>> base_geometry.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

========================================

Checking for one argument to integer_validator():

    >>> base_geometry.integer_validator("age")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
